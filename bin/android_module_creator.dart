import 'dart:io';

import 'package:logger/logger.dart';

/// Responsible for creating a new android module in the /android directory
/// of the flutter project.
class AndroidModuleCreator {
  String moduleName;
  String aarFileName;

  AndroidModuleCreator(this.moduleName, this.aarFileName);

  String _gradleFileContent(String aarFileName) => '''
configurations.maybeCreate("default")
artifacts.add("default", file('$aarFileName'))
''';

  String _readmeContent(String moduleName, String aarFileName) => '''
# Spotify Android SDK for Flutter
This module (':$moduleName') was generated by running the android_setup script of
the [spotify_sdk](https://pub.dev/packages/spotify_sdk) plugin. If you want to
update the aar-library, please run the android_setup script again using on of the
following commands:
```
flutter pub run spotify_sdk:android_setup
dart run spotify_sdk:android_setup
```
''';

  Future<void> createModuleDirectory() async {
    final logger = Logger();

    // create directory in /android
    final aarDir = await Directory('android/$moduleName').create();
    logger.t('created new directory ${aarDir.path}');

    // create build.gradle file
    final gradleFile = await File('${aarDir.path}/build.gradle').create();
    logger.t('created new file ${gradleFile.path}');
    await gradleFile.writeAsString(_gradleFileContent(aarFileName));

    _settingsGradle(logger);

    _appBuildGradle(logger);

    // create README.md file
    final readmeFile = await File('${aarDir.path}/README.md').create();
    logger.t('created new file ${readmeFile.path}');
    await readmeFile.writeAsString(_readmeContent(moduleName, aarFileName));
  }

  void _settingsGradle(Logger logger) async {
    // edit settings.gradle file
    final settingsFile = await File('android/settings.gradle').readAsString();
    final includeStatement = "include ':$moduleName'";
    if (settingsFile.contains(includeStatement)) {
      logger.t('settings.gradle already contains $includeStatement');
    } else {
      final newSettingsFile = settingsFile.replaceFirst(
          'include \':app\'', 'include \':app\'\ninclude \':$moduleName\'');
      await File('android/settings.gradle').writeAsString(newSettingsFile);
    }
  }

  void _appBuildGradle(Logger logger) async {
    // edit app/build.gradle file
    final appBuildFile = await File('android/app/build.gradle').readAsString();
    final implementationStatement = "implementation project(':$moduleName')";
    if (appBuildFile.contains(implementationStatement)) {
      logger.t('app/build.gradle already contains $implementationStatement');
    } else {
      final newAppBuildFile = appBuildFile.replaceFirst('dependencies {',
          'dependencies { \n    implementation project(\':$moduleName\')');
      await File('android/app/build.gradle').writeAsString(newAppBuildFile);
    }
  }
}
